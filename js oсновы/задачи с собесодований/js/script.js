//  	Какое будет выведено значение: let x = 5; alert( x++ ); ?
//      Алерт выведет  5, потом увеличит значение
//      чтоб алерт сразу вывел 6 нужно ++x
//      Ответ: 5

//  	Чему равно такое выражение: [] + false - null + true ?
//  	пустой массив заменяется пустой строкой, когда строка соединяется 
//      с другим типом данных, в итоге  будет строка. Добавляя и отнимаю 
//      разные типы  данных мы получим NaN
//      Ответ: NaN

//  	Что выведет этот код: let y = 1; let x = y = 2; alert(x); ?
//  	Ответ: 2

//  	Чему равна сумма [ ] + 1 + 2?
//      []+1+2 -  пустой массив  = пустая строка. Дальше тип данных строка ""+1+2. Выходит 12
//      Ответ: 12;


//  	Что выведет этот код: alert( "1"[0] )?
//      Строка "1" мы образаемся к [0]  символу. Что является 1;
//      Ответ: 1

//  	Чему равно 2 && 1 && null && 0 && undefined ?
//      Ответ: null

//  	Есть ли разница между выражениями? !!( a && b ) и (a && b)?
//      !!( a && b ) булин превращает 


//      Что выведет этот код: alert( null || 2 && 3 || 4 ); ?
//      && имеет приоритет выполнения чем  ||
//      Выполнаяется 2 && 3, будет 3 потому что это оба True, поэтому возращает последний
//      дальше идет  перебор ИЛИ (или запинается на true), null - false, 3 - true.Остановка.
//      Ответ: 3


//  	a = [1, 2, 3]; b = [1, 2, 3]; Правда ли что a == b ?
//      Эти переменные имеют одинаковую информацию, но они не равны друг другу
//      Ответ: Нет


//  	Что выведет этот код: alert( +"Infinity" ); ?
//      + делает строку в тип данных 'number'. Выведет Infinity, с типом данных number
//      Ответ: Infinity

//  	Верно ли сравнение: "Ёжик" > "яблоко"?
//      это особенности unicode 'я' последняя буква в алфавите. Эти особенности можно посмотреть в таблице юникода
//      Ответ: нет

//  	Чему равно 0 || "" || 2 || undefined || true || falsе ?
//      Или запинается на true.  0 "" - false. 2 - True. Остановился код
//      Ответ: 2
